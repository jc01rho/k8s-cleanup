# This is a basic workflow to help you get started with Actions
name: CI Image build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]


  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Build an canary security image from Dockerfile #for trivy checks before doing a crossbuild.
        run: |
          docker build -t docker.io/jc01rho/k8s-cleanup:${{ github.sha }} .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/jc01rho/k8s-cleanup:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'  
          
      - name: semantic version
        id: semantic_version
        uses: paulhatch/semantic-version@v5.3.0
        with:
          # The prefix to use to identify tags
         tag_prefix: "v"
         # A string which, if present in a git commit, indicates that a change represents a
         # major (breaking) change, supports regular expressions wrapped with '/'
         major_pattern: "(MAJOR)"
         # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
         minor_pattern: "(MINOR)"
         # A string to determine the format of the version outpRut
         format: "v${major}.${minor}.${patch}"
         # Optional path to check for changes. If any changes are detected in the path the
         # 'changed' output will true. Enter multiple paths separated by spaces.
         #change_path: "src/my-service"
         # Named version, will be used as suffix for name version tag
         #namespace: alpssh
         # Indicate whether short tags like 'v1' should be supported. If false only full
         # tags like 'v1.0.0' will be recognized.
         short_tags: true
         # If this is set to true, *every* commit will be treated as a new version.
         bump_each_commit: true 


      - name: do release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.semantic_version.outputs.version }}
             
    

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
       
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
        
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
    
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
            
                     
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: jc01rho
          password: ${{ secrets.CR_PAT }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,enable=true,priority=900,pattern={{version}},value=${{ steps.semantic_version.outputs.version }}     
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64, linux/arm/v7, linux/arm64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

